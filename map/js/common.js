KS = 1.0;
// mapid = 0;
ChkYlw = 999;
BChkYlw = 999;
// LnkA = new Array("中央プラトン街道 / ブルンネンシュティグ入口付近", "ギルディル川 / ナス橋付近", "東プラトン街道 / イースタンブリッジ付近", "冒険家協会ブルンネンシュティグ本部", "地下水路　Ｂ１", "ワリドの武器店", "クリムスン商店", "ゼンシの防具店", "ブルンネンシュティグ銀行", "ブルンギルド連合会", "地下水路　Ｂ１", "ブルンネンシュティグギルド戦　申込事務室", "地下墓地　Ｂ１", "国会議員ブロームの事務室", "[ランク1]ギルドホール", 0);
// MapX = 200;
// MapY = 200;
// ObjY = new Array(78, 101.6, 91.3, 94.3, 122.9, 142.3, 61.3, 171.4, 83.8, 50.6, 85.3, 158.6, 114.2, 72.7, 135.1, 102, 99.9, 136.3, 63.1, 164.1, 73.7, 138.1, 136.9, 78.8, 161.3, 86.6, 54.7, 81.5, 81.8, 79.9, 155.8, 51, 151.1, 68.3, 40.7, 74, 63.9, 10.1, 107.9, 83.1, 51.5, 73.4, 82.4, 148.1, 160.6, 19.5, 15.8, 4.3, 74.9, 72.6, 145.1, 119.6, 167.5, 67, 98.3, 193.3, 83, 57.9, 46.3, 71.8, 55, 117.9, 107, 47.8, 68.6, 191.7, 88.9, 104.4, 97.6, 79.3, 106.7, 137.1, 146.1, 63.5, 135.2, 189, 149.4, 56, 184.3, 89.3, 21.6, 166.4, 192.7, 75.8, 100.2, 157.5, 96.2, 105.2, 41.9, 56.3, 102.3, 77, 92.2, 92, 110.1, 92.2, 167.1, 78.3, 53.5, 188.4, 84.6, 63.9, 98.6, 165, 83, 74.7, 91.8, 77.8, 83.1, 62.6, 101, 78.4, 63, 63.2, 102.6, 0);
// ObjX = new Array(274.8, 88.4, 110.3, 71.4, 103.6, 166.1, 56.5, 325, 42.8, 119.5, 246.9, 288.4, 65.7, 155, 34.7, 279.2, 96.4, 32.7, 98.9, 227.5, 140.1, 30.6, 36.7, 193.8, 99.5, 280.2, 144.9, 193.9, 139.8, 191.9, 262.3, 35, 209.1, 154.9, 103.1, 186, 204.1, 39.2, 232.8, 207.2, 161.8, 267.8, 158.1, 163.7, 304.6, 389.5, 394.7, 373.8, 315.5, 79.7, 58.8, 184.8, 365.1, 71.1, 264.7, 368.7, 148, 101.1, 78.4, 90.7, 49, 298.7, 246.7, 20.2, 134.8, 363.2, 14.1, 207.3, 240, 202.9, 66.9, 298.3, 24.5, 132.9, 334.5, 155, 101.5, 289.4, 12.8, 373.5, 380.4, 231, 381.4, 153.7, 235.2, 112.8, 87.2, 155.4, 89.3, 183.1, 228.6, 174.3, 174.4, 190.4, 222.8, 334.8, 79.4, 151.8, 285.3, 390.9, 66.8, 64.6, 128.5, 207.4, 21.1, 50.8, 158.9, 40.7, 115.8, 158.8, 162.4, 143.4, 81, 167.3, 32.8, 0);
// ObjT = new Array
// ObjN = new Array(2, 2, 2, 3, 3, 4, 5, 5, 5, 26, 26, 26, 26, 26, 14, 27, 27, 20, 6, 6, 6, 15, 11, 7, 7, 8, 8, 9, 9, 10, 10, 10, 10, 10, 21, 22, 22, 12, 25, 25, 24, 23, 23, 28, 28, 29, 29, 30, 16, 1, 1, 1, 17, 19, 18, 13, 31, 32, 33, 35, 34, 36, 37, 47, 43, 54, 38, 41, 39, 51, 49, 56, 53, 44, 40, 46, 52, 50, 42, 55, 48, 45, 59, 63, 60, 62, 58, 61, 57, 64, 65, 69, 67, 66, 68, 70, 71, 72, 73, 75, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 0);
// LnkY = new Array(68.4, 193.9, 102.9, 99.6, 68.1, 96.9, 51.5, 59.3, 105.2, 75.4, 158.2, 49.2, 175.2, 98.9, 79.3, 63.3, 42, 167.2, 140.6, 149.8, 103.7, 43.4, 18.9, 178.1, 13.3, 96.1, 112.8, 2.1, 19.6, 0);
// LnkX = new Array(2.1, 132.8, 390.1, 48.2, 336.3, 130.5, 37.8, 83.7, 114.5, 254.2, 26.3, 156.4, 28.3, 208.9, 145.9, 55.6, 239.7, 90.8, 42.4, 226.6, 221.3, 88.3, 30.1, 342.7, 361.5, 95.5, 316.7, 28.3, 10.5, 0);
// LnkS = new Array(3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 0);
// LnkP = new Array("10", "24", "16", "502", "152", "61", "62", "60", "94", "95", "152", "153", "13", "377", "543", "没落貴族の屋敷", "オベリスク", "水路南側入り口", "井戸", "国会議事堂", "商店街", "崩れた王宮跡", "製鉄所", "木工所", "銀行", "郵便局", "", "王国地下", 0);
LnkA = [];
MapX = 0;
MapY = 0;
ObjY = [];
ObjX = [];
ObjT = [];
ObjN = [];
LnkY = [];
LnkX = [];
LnkS = [];
LnkP = [];
Name = "";
NameImg = "";

mapid = getParam('mapid') ? getParam('mapid') : 0;

Jump(mapid);



function Up() {
    KS = KS + 0.2;
    Ad();
}

// 引数で既にmapのid入ってる
function Jump(num) {
    //名前入れ替えの術
    datalist(num);
    // 画像入れ替え
    // 配列総入れ替え
    // ぜーんぶ再描画
    mapid = parseInt(num);
    ChkYlw = 999;
    BChkYlw = 999;
    KS = 1.0;
    Ad();
    return false;
}

function Dn() {
    KS = KS - 0.2;
    Ad();
}

function Yl(num) {
    BChkYlw = ChkYlw;
    ChkYlw = num;
    if (BChkYlw == ChkYlw) ChkYlw = 999;
    Ad()
    return false;
}

function Ad() {
    map_image.width = (MapX * 2) * KS;
    map_image.height = (MapY) * KS;
    $("#map_blank").css({
        "height": (MapY) * KS,
    });
    if (!document.getElementsByTagName) { return; }
    var objs = document.getElementsByTagName("div");
    j = 0;
    k = 0;
    for (i = 0; i < objs.length; i++) {
        if (objs[i].className.substr(0, 3) == "Obj") {
            $(objs[i + 0]).css({
                "top": (ObjY[j]) * KS,
                "left": (ObjX[j]) * KS + 20
            })
            $(objs[i + 1]).css({
                "top": (ObjY[j]) * KS - 1,
                "left": (ObjX[j]) * KS + 20 - 1
            })
            i = i + 1;
            j = j + 1;
            // クリックしたオブジェクトに色づけするんやで
            if (BChkYlw != 999) {
                if (objs[i - 1].className.substr(7) == "a" + BChkYlw) {
                    $(objs[i - 0]).css({
                        "color": "#ff0000",
                        "backgroundColor": ""
                    })
                }
            }
            if (ChkYlw != 999) {
                if (objs[i - 1].className.substr(7) == "a" + ChkYlw) {
                    $(objs[i - 0]).css({
                        "color": "#ffff00",
                        "backgroundColor": "#000000"
                    })
                }
            }
        }
        if (objs[i].className.substr(0, 3) == "Lnk") {
            $(objs[i + 0]).css({
                "top": (LnkY[k]) * KS,
                "left": (LnkX[k]) * KS + 20
            })
            $(objs[i + 1]).css({
                "top": (LnkY[k]) * KS - 1,
                "left": (LnkX[k]) * KS + 20 - 1
            })
            i = i + 1;
            k = k + 1;
        }
    }
}


/**
 * Get the URL parameter value
 *
 * @param  name {string} パラメータのキー文字列
 * @return  url {url} 対象のURL文字列（任意）
 */
function getParam(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}
