//  ページロード時の処理
	function Init()
	{
		
		
		// 受けるレポートNo From側の初期化
	    for ( i=0; i<38; i++ ){
    	    document.explvcalcex.reportfrom.options[i] = new Option(i);
    	    document.explvcalcex.reportfrom.options[i].text = kntq_gt[i][0];
    	    document.explvcalcex.reportfrom.options[i].value = kntq_gt[i][1];
    	}
    	document.explvcalcex.reportfrom.selectedIndex = 0; // 初期値 最初

		// 受けるレポートNo To側の初期化
	    for ( i=0; i<38; i++ ){
    	    document.explvcalcex.reportto.options[i] = new Option(i);
  	    	document.explvcalcex.reportto.options[i].text = kntq_gt[i][0];
   	    	document.explvcalcex.reportto.options[i].value = kntq_gt[i][1];
    	}
    	document.explvcalcex.reportto.selectedIndex = 37; // 初期値 最後
    	
    	getexpcalc();  // 計算させる。

	}

//
// function explvcalc()
//  機能：EXP→Lv計算処理（「計算！」ボタンが押された場合の処理）
//
    function explvcalc()
  {
      gt = new Array(10);
      var i, j, baselv, baseexp, cnt;

// 演算負荷を軽くするため、固定値を準備
      gt[0] = 39908880;
      gt[1] = 441027180;
      gt[2] = 1808887340;
      gt[3] = 4931858880;
      gt[4] = 10744909240;
      gt[5] = 20308052880;
      gt[6] = 34794519880;
      gt[7] = 55479287520;
      gt[8] = 83731169880;

    // 初期処理
      exptotal = 0;
      expindex = 1.00;
      tenseikaisuu = eval(document.explvcalcex.tenseikaisuu.value);
      if ( tenseikaisuu == 3 ){	kijunlv=598;}
      else { kijunlv=600; }
      nowlv = eval(document.explvcalcex.nowlv.value);
      nowhasuu = eval(document.explvcalcex.hasuuexp.value);
      kakutokuexp = eval(document.explvcalcex.kakutokuexp.value);
      
      nowExp = LvtoExp(nowlv) + nowhasuu + kakutokuexp;
      
      // Lvの百の単位がいくつかを算出する。
      hyakutani = 0;
      for ( i = 0 ; i < 8 ; i++){
      	if ( nowExp < gt[i] ) break;
      	hyakutani++ ;
      }
      
      tmpLv = hyakutani * 100 ;
      
      if ( hyakutani == 0 ) needtotalExp = 0;
      else					needtotalExp = gt[hyakutani-1];
      
      // 獲得したEXPを加算した分で、Lvがいくつになるかを計算する。
      for ( i = 0 ; i < 100 ; i++ ){
      	needtotalExp += expnextlv( tmpLv + i ) ;
      	if ( needtotalExp > nowExp ){
      		resLv = tmpLv + i;
      		break;
      	}
      }
      
      // 転生に関する処理と結果の出力
      nowtenseilv = resLv;
      if ( tenseikaisuu == 3 || tenseikaisuu == 4 ){
        // すでに３転または４転している場合はそのまま結果のみ出力する。
      	neednextExp = needtotalExp - nowExp;
      	sRes = tenseikaisuu + "次転生のLv" + resLv + " （次Lvまでの必要EXP：" + neednextExp + "）";
      	document.explvcalcex.kekka.value = sRes;
      } else {
        // ２転以下の場合、転生した結果も追記・出力する。
      	neednextExp = needtotalExp - nowExp;
      	sRes = tenseikaisuu + "次転生のLv" + resLv + " （次Lvまでの必要EXP：" + neednextExp + "）";

      	tenseikaisuutmp = tenseikaisuu;  // 元の転生回数
      	totalexptmp = nowExp;
      	tmpLv = resLv ;
      	for ( i = 0; i < 3-tenseikaisuu ; i++ ){
          // 現在の転生回数を見て、次の転生可能Lvを設定する。
      		if ( tenseikaisuutmp == 2 ){
      		// ２転（Lv598で転生可）
      			tenseikanouLv = 598;
    		} else {
    		// ０転 or １転（Lv600で転生可）
      			tenseikanouLv = 600;
    		}
    		
    	  // 転生出来る？
    		if ( resLv >= tenseikanouLv ){
    			// 転生可能な場合、転生して何Lvになるかを計算する。
    			totalexptmp -= LvtoExp(tenseikanouLv);
    			tenseikaisuutmp++;
			    // Lvの百の単位がいくつかを算出
      			hyakutani = 0;
      			for ( j = 0 ; j < 8 ; j++){
      				if ( totalexptmp < gt[j] ) break;
      				hyakutani++ ;
      			}
      			
      			tmpLv = hyakutani * 100 ;
      			// Lvの計算
      			if ( hyakutani == 0 ) 	needtotalExp = 0;
      			else					needtotalExp = gt[hyakutani-1];

       			for ( j = 0 ; j < 100 ; j++ ){
      				needtotalExp += expnextlv( tmpLv + j ) ;
      				if ( needtotalExp > totalexptmp ){
      					resLv = tmpLv + j;
      					break;
      				}
      			}

    			// 転生結果を出力用の文字列に追加する。
		      	neednextExp = needtotalExp - totalexptmp;
    			sRes += "\n" + tenseikaisuutmp + "次転生のLv" + resLv + " （次Lvまでの必要EXP：" + neednextExp + "）";
    		}else{
    			// 転生出来ない場合は抜け、結果の出力へ移る。
    			break;
    		}
      	}
      	// 結果をテキストエリアに出力する。
      	document.explvcalcex.kekka.value = sRes;
      }
  }

// function explvcalc_re( btn, zoubun )
//  機能：EXP→Lv計算処理（矢印ボタンによってLvが変更された場合の操作）
//  引数：btn ボタンの種類。1 （ここでは分岐未使用のため、常に１を引数に指定すること。）
//    zoubun 増分値
//
    function explvcalc_re( btn, zoubun )
  {
    switch( btn ){
      case 1: // 
        nowlv = eval(document.explvcalcex.nowlv.value);
        nowlv += zoubun;
        if ( nowlv < 1 ) nowlv = 1;
        document.explvcalcex.nowlv.value = nowlv;
        explvcalc();  // 再計算させる
        break;
    }
  }

//
//	受けるレポートNo．が変更された場合の処理
//
	function getexpcalc()
	{
		element = document.getElementsByName("reportfrom")[0];
		selindex_from = document.explvcalcex.reportfrom.selectedIndex;
		if ( selindex_from == 0 ){
			expfrom = 0;
		} else {
			expfrom = element.options[selindex_from-1].value;
		}
		selindex_to = document.explvcalcex.reportto.selectedIndex;
		expto = document.explvcalcex.reportto.value;
		
		if ( expto - expfrom < 0 ){
			document.explvcalcex.kakutokuexp.value = 0;
		} else {
			document.explvcalcex.kakutokuexp.value = expto - expfrom;
		}
//		sRes = selindex_from + ", " + expfrom + ", " + selindex_to + ", " + expto;
//      	document.explvcalcex.kekka.value = sRes;
		
	}

//
//  レポートクエの累計獲得EXPテーブル（15/12/23追加）
//
		kntq_gt = new Array();
		
		for ( i=0; i<38; i++){
			kntq_gt[i] = new Array();
		}
		
		kntq_gt[0] = new Array("最初（１）", 2373583);
		kntq_gt[1] = new Array("２",12676968);
		kntq_gt[2] = new Array("３",58272909);
		kntq_gt[3] = new Array("４",178458036);
		kntq_gt[4] = new Array("５",394526978);
		kntq_gt[5] = new Array("６",767646735);
		kntq_gt[6] = new Array("７",1284116650);
		kntq_gt[7] = new Array("８",2039965697);
		kntq_gt[8] = new Array("９",2957193833);
		kntq_gt[9] = new Array("１０",4184928459);
		kntq_gt[10] = new Array("１１",5547754955);
		kntq_gt[11] = new Array("１２",7274442949);
		kntq_gt[12] = new Array("１３",9057112099);
		kntq_gt[13] = new Array("１４",11232807237);
		kntq_gt[14] = new Array("１５",12150035373);
		kntq_gt[15] = new Array("１６",13377769999);
		kntq_gt[16] = new Array("１７",14740596495);
		kntq_gt[17] = new Array("１８",16467284489);
		kntq_gt[18] = new Array("１９",18249953638);
		kntq_gt[19] = new Array("２０",20425648777);
		kntq_gt[20] = new Array("２１",21342876913);
		kntq_gt[21] = new Array("２２",22570611539);
		kntq_gt[22] = new Array("２３",23933438035);
		kntq_gt[23] = new Array("２４",25660126029);
		kntq_gt[24] = new Array("２５",27442795178);
		kntq_gt[25] = new Array("２６",29618490317);
		kntq_gt[26] = new Array("２７",30535718453);
		kntq_gt[27] = new Array("２８",31763453079);
		kntq_gt[28] = new Array("２９",33126279575);
		kntq_gt[29] = new Array("３０",34852967569);
		kntq_gt[30] = new Array("３１",36635636718);
		kntq_gt[31] = new Array("３２",38811331856);
		kntq_gt[32] = new Array("３３",39728559993);
		kntq_gt[33] = new Array("３４",40956294618);
		kntq_gt[34] = new Array("３５",42319121114);
		kntq_gt[35] = new Array("３６",44045809108);
		kntq_gt[36] = new Array("３７",45828478258);
		kntq_gt[37] = new Array("最後（３８）",48004173396);


//
//  EXP配列テーブル（830以降、12/03/29追加）
//
var nextexptable = new Array();
nextexptable[0] = 265269680;
nextexptable[1] = 266076834;
nextexptable[2] = 266896790;
nextexptable[3] = 267742876;
nextexptable[4] = 268635942;
nextexptable[5] = 269606048;
nextexptable[6] = 270694158;
nextexptable[7] = 271953840;
nextexptable[8] = 273452972;
nextexptable[9] = 275275454;
nextexptable[10] = 277522926;
nextexptable[11] = 280316492;
nextexptable[12] = 283798450;
nextexptable[13] = 288134028;
nextexptable[14] = 293513126;
nextexptable[15] = 300152064;
nextexptable[16] = 308295336;
nextexptable[17] = 318217370;
nextexptable[18] = 330224294;
nextexptable[19] = 344655708;
nextexptable[20] = 361886462;
nextexptable[21] = 382328440;
nextexptable[22] = 406432350;
nextexptable[23] = 434689520;
nextexptable[24] = 467633700;
nextexptable[25] = 505842870;
nextexptable[26] = 549941054;
nextexptable[27] = 600600140;
nextexptable[28] = 658541706;
nextexptable[29] = 724538852;
nextexptable[30] = 799418038;
nextexptable[31] = 884060928;
nextexptable[32] = 979406240;
nextexptable[33] = 1086451602;
nextexptable[34] = 1206255414;
nextexptable[35] = 1339938716;
nextexptable[36] = 1488687062;
nextexptable[37] = 1653752400;
nextexptable[38] = 1836454958;
nextexptable[39] = 2038185136;
nextexptable[40] = 2260405404;
nextexptable[41] = 2504652206;
nextexptable[42] = 2772537870;
nextexptable[43] = 3065752524;
nextexptable[44] = 3386066018;
nextexptable[45] = 3735329852;
nextexptable[46] = 4115479110;
nextexptable[47] = 4528534400;
nextexptable[48] = 4976603800;
nextexptable[49] = 5461884810;
nextexptable[50] = 5986666310;
nextexptable[51] = 6553330524;
nextexptable[52] = 7164354990;
nextexptable[53] = 7822314536;
nextexptable[54] = 8529883262;
nextexptable[55] = 9289836528;
nextexptable[56] = 10105052948;
nextexptable[57] = 10978516390;
nextexptable[58] = 11913317982;
nextexptable[59] = 12912658124;
nextexptable[60] = 13979848506;
nextexptable[61] = 15118314132;
nextexptable[62] = 16331595350;
nextexptable[63] = 17623349888;
nextexptable[64] = 18997354896;
nextexptable[65] = 20457508994;
nextexptable[66] = 22007834326;
nextexptable[67] = 23652478620;
nextexptable[68] = 25395717254;
nextexptable[69] = 27241955328;
nextexptable[70] = 29195729742;
//
// 関数名：expnextlv( Lv )
// 機能：引数の次のLvまでに必要なEXPを返す。
// 戻り値：引数の次のLvまでに必要なEXP
//
    function expnextlv(Lv)
  {

     var i, j, exp;

      if ( Lv < 829 ){
        i = Math.ceil(( Math.sqrt( 4 * Lv + 1 ) - 3 )/2) ;
        j = Lv-2-(i-1)*(i+2);
        exp = 170*Lv+80+(20/3)*(3*(i+1)* Math.pow(j,2) + (5*Math.pow(i,3)+9*Math.pow(i,2)+16*i-9)*j+(2*Math.pow(i,5)+5*Math.pow(i,4)+12*Math.pow(i,3)-8*Math.pow(i,2)-17*i+6));
      } else {
         if ( Lv <=899 ){
           exp = nextexptable[Lv-829];
         } else {
         // 900Lv以降は無効 12/3/29
           exp = 0;
         }
      }
      return exp;
  }

//
// 関数名：LvtoExp( Lv )
// 機能：引数のLvになるまでの累計EXPを計算する。
// 戻り値：引数のLvになるまでの累計EXP
//
    function LvtoExp(Lv)
  {
      gt = new Array(10);
      var i, j, baselv, baseexp, cnt;

// 演算負荷を軽くするため、固定値を準備
      gt[0] = 39908880;
      gt[1] = 441027180;
      gt[2] = 1808887340;
      gt[3] = 4931858880;
      gt[4] = 10744909240;
      gt[5] = 20308052880;
      gt[6] = 34794519880;
      gt[7] = 55479287520;
      gt[8] = 83731169880;

      baselv = Math.floor(Lv/100)*100;
      if( Lv<100 )	baseexp = 0 ;
            else		baseexp = gt[Math.floor(Lv/100)-1];
      cnt = Lv - baselv;
      for ( i = 0 ; i<cnt ; i++ ){
        baseexp += expnextlv( baselv + i );
      }
      return baseexp;
  }

//
// 関数名：ExptoLv( Exp )
// 機能：総獲得経験値から現在何Lvかを計算する。
// 引数：Exp 総獲得経験値
// 戻り値：現在のLv
//
    function ExptoLv( Exp )
  {
      gt = new Array(10);
      var i, j, baselv, baseexp, cnt;

// 演算負荷を軽くするため、固定値を準備
      gt[0] = 39908880;
      gt[1] = 441027180;
      gt[2] = 1808887340;
      gt[3] = 4931858880;
      gt[4] = 10744909240;
      gt[5] = 20308052880;
      gt[6] = 34794519880;
      gt[7] = 55479287520;
      gt[8] = 83731169880;
      
      // 百の単位の計算
      hyakutani = 0;
      for ( i = 0 ; i < 8 ; i++){
      	if ( Exp < gt[i] ) break;
      	hyakutani++ ;
      }
      
      tmpLv = hyakutani * 100 ;
      
      if ( hyakutani == 0 ) needtotalExp = 0;
      else					needtotalExp = gt[hyakutani-1];
      
      for ( i = 0 ; i < 100 ; i++ ){
      	needtotalExp += expnextlv( tmpLv + i ) ;
      	if ( needtotalExp > Exp ){
      		resLv = tmpLv + i;
      		break;
      	}
      }

      return resLv;
  }


//
// クラス名：expadv( Lv, exptotal, ind )
// 機能：引数のLvからexptotalのEXPを倍率indで加えた時のLvと残りexpを演算する。
// メンバ：lv, exp
// 戻り値：なし。
//
    function expadv( Lv, exptotal, ind )
  {
     this.lv = Lv; // 初期Lv
     this.exp = Math.floor( exptotal * ind ) ;  // 入るtotalのEXP
     nextexp = expnextlv( this.lv );
     while( this.exp > nextexp ){
       this.lv++ ;
       this.exp -= nextexp ;
       nextexp = expnextlv( this.lv );
     }
  }


